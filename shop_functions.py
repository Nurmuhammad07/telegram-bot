import logging
import json
import os
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes
import time

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE, SHOP_ITEMS):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        'boosters': 'üéØ –ë—É—Å—Ç–µ—Ä—ã',
        'game': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
        'roles': 'üî∞ –†–æ–ª–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã'
    }
    
    for category, title in categories.items():
        keyboard.append([InlineKeyboardButton(title, callback_data=f'shop_category_{category}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=reply_markup
    )

async def show_shop_category(query: CallbackQuery, category: str, SHOP_ITEMS):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = {
        'boosters': 'üéØ –ë—É—Å—Ç–µ—Ä—ã',
        'game': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
        'roles': 'üî∞ –†–æ–ª–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_items = {}
    for item_id, item in SHOP_ITEMS.items():
        if 'category' in item:
            if item['category'] not in category_items:
                category_items[item['category']] = []
            category_items[item['category']].append(item_id)
    
    if category not in category_items:
        await query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    text = f"üè™ {categories.get(category, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}:\n\n"
    keyboard = []
    
    for item_id in category_items[category]:
        item = SHOP_ITEMS[item_id]
        text += f"{item['name']} - {item['price']} –º–æ–Ω–µ—Ç\n"
        text += f"üìù {item['description']}\n"
        if item['duration'] > 1:
            text += f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {item['duration']} –¥–Ω–µ–π\n"
        text += "\n"
        keyboard.append([InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å {item['name']}", callback_data=f'buy_{item_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='shop')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

async def process_purchase(query: CallbackQuery, item_id: str, SHOP_ITEMS, user_currency, user_items, user_statuses, user_nicknames, user_roles, update_user_balance, save_user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    user_id = str(query.from_user.id)
    
    if item_id not in SHOP_ITEMS:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    item = SHOP_ITEMS[item_id]
    user_balance = user_currency.get(user_id, 1000)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–µ–π
    if item_id.startswith('role_') and 'role' in item:
        current_role = user_roles.get(user_id, 'user')
        target_role = item['role']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å
        can_buy = False
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å admin, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏
        if current_role == 'admin':
            await query.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å Admin, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—à–µ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π!")
            return
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å moderator, –æ–Ω –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ admin
        elif current_role == 'moderator':
            if target_role == 'admin':
                can_buy = True
            elif target_role == 'operator':
                await query.answer("‚ùå –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å Moderator –≤—ã—à–µ —Ä–æ–ª–∏ Operator!")
                return
            elif target_role == 'moderator':
                await query.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å!")
                return
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å operator, –æ–Ω –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ admin –∏ moderator
        elif current_role == 'operator':
            if target_role in ['admin', 'moderator']:
                can_buy = True
            elif target_role == 'operator':
                await query.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å!")
                return
        
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –ª—é–±—É—é —Ä–æ–ª—å
        else:
            can_buy = True
        
        if not can_buy:
            return
    
    if user_balance < item['price']:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
        try:
            keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='shop')]]
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item['name']}!\n\n"
                f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {item['price']} –º–æ–Ω–µ—Ç\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –º–æ–Ω–µ—Ç\n\n"
                f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {item['price'] - user_balance} –º–æ–Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "Message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –º–æ–Ω–µ—Ç: {str(e)}")
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await update_user_balance(user_id, -item['price'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id not in user_items:
        user_items[user_id] = {}
    
    current_time = datetime.now(pytz.UTC)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏
    if item_id.startswith('role_') and 'role' in item:
        role = item['role']
        
        # –ù–∞–ø—Ä—è–º—É—é –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_roles[user_id] = role
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏
        if 'role_expiry' not in user_items.get(user_id, {}):
            if user_id not in user_items:
                user_items[user_id] = {}
            user_items[user_id]['role_expiry'] = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ (30 –¥–Ω–µ–π)
        user_items[user_id]['role_expiry'][role] = int(time.time()) + (item['duration'] * 24 * 60 * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        await query.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–æ–ª—å {item['name']}!\n"
            f"–†–æ–ª—å –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å {item['duration']} –¥–Ω–µ–π."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_user_data(user_currency, {}, {}, user_items, user_statuses, user_nicknames, user_roles)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
        try:
            keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='shop')]]
            await query.edit_message_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–æ–ª—å {item['name']}!\n"
                f"–†–æ–ª—å –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å {item['duration']} –¥–Ω–µ–π.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ä–æ–ª–∏: {str(e)}")
        
        return
    
    elif item_id == 'custom_nickname':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
        await query.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "‚ùóÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ–ª–∞–µ–º—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º"
        )
        if user_id not in user_items:
            user_items[user_id] = {}
        user_items[user_id]['awaiting_nickname'] = True
        save_user_data(user_currency, {}, {}, user_items, user_statuses, user_nicknames, user_roles)
        return
    
    elif item_id == 'custom_status':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        await query.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "‚ùóÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ–ª–∞–µ–º—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"
        )
        if user_id not in user_items:
            user_items[user_id] = {}
        user_items[user_id]['awaiting_status'] = True
        save_user_data(user_currency, {}, {}, user_items, user_statuses, user_nicknames, user_roles)
        return
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if item['duration'] > 1:
        expiration = current_time + timedelta(days=item['duration'])
        user_items[user_id][item_id] = expiration.isoformat()
    else:
        if item_id not in user_items[user_id]:
            user_items[user_id][item_id] = 0
        user_items[user_id][item_id] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_user_data(user_currency, {}, {}, user_items, user_statuses, user_nicknames, user_roles)
    
    await query.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {item['name']}!")
    
    category = item.get('category', 'boosters')
    try:
        await show_shop_category(query, category, SHOP_ITEMS)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {str(e)}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
            try:
                keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='shop')]]
                await query.edit_message_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {item['name']}!\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except:
                pass

def has_active_item(user_id: str, item_id: str, user_items):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_items or item_id not in user_items[user_id]:
        return False
    
    value = user_items[user_id][item_id]
    if isinstance(value, int):
        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        return value > 0
    else:
        # –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        try:
            expiration = datetime.fromisoformat(value)
            return datetime.now(pytz.UTC) < expiration
        except (ValueError, TypeError):
            return False

def use_item(user_id: str, item_id: str, user_items, save_user_data, user_currency, user_predictions, user_names, user_statuses, user_nicknames):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if not has_active_item(user_id, item_id, user_items):
        return False
    
    value = user_items[user_id][item_id]
    if isinstance(value, int):
        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        user_items[user_id][item_id] -= 1
        if user_items[user_id][item_id] <= 0:
            del user_items[user_id][item_id]
    # –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
    # –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
    
    save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames)
    return True

def save_shop_items(SHOP_ITEMS):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        shop_file = os.path.join(os.environ.get('RAILWAY_VOLUME_MOUNT_PATH', ''), 'shop_items.json')
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(shop_file) or '.', exist_ok=True)
        
        with open(shop_file, 'w', encoding='utf-8') as f:
            json.dump(SHOP_ITEMS, f, ensure_ascii=False, indent=4)
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {shop_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")

def load_shop_items():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        shop_file = os.path.join(os.environ.get('RAILWAY_VOLUME_MOUNT_PATH', ''), 'shop_items.json')
        if os.path.exists(shop_file):
            with open(shop_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {shop_file}")
                return data
        logger.info(f"–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {shop_file}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")
        return None 