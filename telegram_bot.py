import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import asyncio
import json
from datetime import datetime, timedelta
import pytz
import aiohttp
import signal
import sys
import nest_asyncio
import atexit
from shop_functions import shop_command as shop_cmd, show_shop_category as show_shop, process_purchase as process_purchase_shop, has_active_item as has_active_item_shop, use_item as use_item_shop, save_shop_items, load_shop_items
import re
import time

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
LOCK_FILE = "bot.lock"

def check_running():
    if os.path.exists(LOCK_FILE):
        try:
            with open(LOCK_FILE, 'r') as f:
                pid = int(f.read().strip())
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
            os.kill(pid, 0)
            return True
        except (OSError, ValueError):
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
            os.remove(LOCK_FILE)
    return False

def create_lock():
    with open(LOCK_FILE, 'w') as f:
        f.write(str(os.getpid()))

def remove_lock():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
atexit.register(remove_lock)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None
shutdown_event = None
previous_scores = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—á–µ—Ç–æ–≤ –º–∞—Ç—á–µ–π
user_predictions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_currency = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_names = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_items = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
matches_cache = {
    'data': [],
    'last_update': None,
    'cache_duration': 30  # –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
}

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_statuses = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
user_nicknames = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤
user_roles = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å—ã
USER_ROLES = {
    'developer': {
        'name': 'üë®‚Äçüíª Developer',
        'prefix': '[DEV] ',
        'color': 'üü£',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        'purchasable': False
    },
    'admin': {
        'name': 'üîê Admin',
        'prefix': '[ADMIN] ',
        'color': 'üî¥',
        'description': '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏',
        'price': 5000,
        'duration': 30,  # –î–Ω–µ–π
        'purchasable': True
    },
    'moderator': {
        'name': 'üõ°Ô∏è Moderator',
        'prefix': '[MOD] ',
        'color': 'üü†',
        'description': '–î–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        'price': 3000,
        'duration': 30,  # –î–Ω–µ–π
        'purchasable': True
    },
    'operator': {
        'name': 'üîß Operator',
        'prefix': '[OP] ',
        'color': 'üü°',
        'description': '–î–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞',
        'price': 2000,
        'duration': 30,  # –î–Ω–µ–π
        'purchasable': True
    },
    'user': {
        'name': 'üë§ User',
        'prefix': '',
        'color': '‚ö™',
        'description': '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'purchasable': False
    }
}

# –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
SHOP_ITEMS = {
    'double_reward': {
        'name': 'üéØ –î–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞',
        'description': '–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –¥–≤–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É',
        'price': 500,
        'duration': 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        'category': 'boosters'
    },
    'insurance': {
        'name': 'üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
        'description': '–í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏',
        'price': 300,
        'duration': 1,
        'category': 'boosters'
    },
    'vip_predict': {
        'name': '‚≠êÔ∏è VIP-–ø—Ä–æ–≥–Ω–æ–∑',
        'description': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∂–µ –Ω–∞—á–∞–≤—à–∏–π—Å—è –º–∞—Ç—á',
        'price': 1000,
        'duration': 1,
        'category': 'boosters'
    },
    'custom_nickname': {
        'name': 'üìù –°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞',
        'description': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ –±–æ—Ç–µ',
        'price': 200,
        'duration': 1,
        'category': 'game'
    },
    'custom_status': {
        'name': 'üí´ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
        'description': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ',
        'price': 300,
        'duration': 30,  # –î–Ω–µ–π
        'category': 'game'
    },
    'vip_status': {
        'name': 'üëë VIP-—Å—Ç–∞—Ç—É—Å',
        'description': '–û—Å–æ–±–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤ —Ç–æ–ø–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'price': 2000,
        'duration': 7,  # –î–Ω–µ–π
        'category': 'game'
    },
    'extended_stats': {
        'name': 'üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'description': '–î–æ—Å—Ç—É–ø –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–∞—Ç—á–µ–π',
        'price': 500,
        'duration': 30,  # –î–Ω–µ–π
        'category': 'football'
    },
    'priority_notifications': {
        'name': 'üîî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        'description': '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º',
        'price': 400,
        'duration': 30,  # –î–Ω–µ–π
        'category': 'football'
    },
    'tournament_tables': {
        'name': 'üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã',
        'description': '–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º',
        'price': 600,
        'duration': 30,  # –î–Ω–µ–π
        'category': 'football'
    },
    'role_admin': {
        'name': USER_ROLES['admin']['name'],
        'description': USER_ROLES['admin']['description'],
        'price': USER_ROLES['admin']['price'],
        'duration': USER_ROLES['admin']['duration'],
        'category': 'roles',
        'role': 'admin'
    },
    'role_moderator': {
        'name': USER_ROLES['moderator']['name'],
        'description': USER_ROLES['moderator']['description'],
        'price': USER_ROLES['moderator']['price'],
        'duration': USER_ROLES['moderator']['duration'],
        'category': 'roles',
        'role': 'moderator'
    },
    'role_operator': {
        'name': USER_ROLES['operator']['name'],
        'description': USER_ROLES['operator']['description'],
        'price': USER_ROLES['operator']['price'],
        'duration': USER_ROLES['operator']['duration'],
        'category': 'roles',
        'role': 'operator'
    }
}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
ADMIN_ID = "791190609"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
PREDICTION_COST = 10    # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
PREDICTION_REWARD_EXACT = 50  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç (x5)
PREDICTION_REWARD_DIFF = 30   # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≥–æ–ª–æ–≤ (x3)
PREDICTION_REWARD_OUTCOME = 20  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥ (x2)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–æ–ø-–º–∞—Ç—á–µ–π
TOP_TEAMS = ["Real Madrid", "Barcelona", "Manchester City", "Liverpool", "Bayern Munich", "PSG"]
TOP_MATCH_MULTIPLIER = 1.5  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –º–∞—Ç—á–µ–π –º–µ–∂–¥—É —Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∞–º–∏

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
COMMANDS = {
    'start': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    'matches': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏',
    'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    'help': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å',
    'predict': '–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –º–∞—Ç—á–∞',
    'balance': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å',
    'top': '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª–µ–π',
    'shop': '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
    'admin': '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)'
}

# –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
AVAILABLE_TEAMS = {
    "Real Madrid": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
    "Barcelona": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞",
    "Manchester City": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏",
    "Manchester United": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥",
    "Liverpool": "–õ–∏–≤–µ—Ä–ø—É–ª—å",
    "Chelsea": "–ß–µ–ª—Å–∏",
    "Arsenal": "–ê—Ä—Å–µ–Ω–∞–ª",
    "Bayern Munich": "–ë–∞–≤–∞—Ä–∏—è",
    "Borussia Dortmund": "–ë–æ—Ä—É—Å—Å–∏—è –î",
    "PSG": "–ü–°–ñ"
}

# –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
FAVORITE_TEAMS = [
    "Real Madrid",
    "Barcelona",
    "Manchester City"
]

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USER_DATA_FILE = "user_data.json"
PREDICTIONS_FILE = "predictions.json"

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USER_DATA_FILE, 'r') as f:
            data = json.load(f)
            return (
                data.get('user_currency', {}),
                data.get('user_predictions', {}),
                data.get('user_names', {}),
                data.get('user_items', {}),
                data.get('user_statuses', {}),
                data.get('user_nicknames', {}),
                data.get('user_roles', {})
            )
    except FileNotFoundError:
        return {}, {}, {}, {}, {}, {}, {}

def save_user_data(currency_data, predictions_data, names_data, items_data, statuses_data, nicknames_data, roles_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    data = {
        'user_currency': currency_data,
        'user_predictions': predictions_data,
        'user_names': names_data,
        'user_items': items_data,
        'user_statuses': statuses_data,
        'user_nicknames': nicknames_data,
        'user_roles': roles_data
    }
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "authorized_users": [],
            "bot_token": "7736382046:AAFmMBfomQ9Xh15gglYuv6eA4Xd1oY2JGuU",
            "football_api_token": "f4d562844acb4bddb32de86d798d35b5",  # –¢–æ–∫–µ–Ω –¥–ª—è football-data.org
            "user_teams": {},
            "last_update": None,
            "cache_duration": 300,  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
            "user_settings": {}
        }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(user_id, config):
    return str(user_id) in config["authorized_users"]

def get_user_display_name(user_id, user=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —Ä–æ–ª–∏"""
    user_id = str(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è
    base_name = ""
    if user_id in user_nicknames:
        base_name = user_nicknames[user_id]
    elif user_id in user_names:
        base_name = user_names[user_id]
    elif user:
        if user.username:
            base_name = f"@{user.username}"
        elif user.first_name and user.last_name:
            base_name = f"{user.first_name} {user.last_name}"
        elif user.first_name:
            base_name = user.first_name
        else:
            base_name = f"User{user_id}"
        user_names[user_id] = base_name
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
    else:
        base_name = f"User{user_id}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ä–æ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in user_roles and user_roles[user_id] in USER_ROLES:
        role = user_roles[user_id]
        prefix = USER_ROLES[role]['prefix']
        return f"{prefix}{base_name}"
    
    return base_name

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if user_id not in user_currency:
        user_currency[user_id] = 1000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚öΩÔ∏è –ú–∞—Ç—á–∏", callback_data='today_matches'),
         InlineKeyboardButton("üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã", callback_data='show_predictions')],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='show_balance'),
         InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data='show_top')],
        [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data='show_shop'),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='show_help')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–æ–ª—è–º–∏
    has_admin_access = False
    
    # Developer –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        has_admin_access = True
        user_roles[user_id] = 'developer'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å developer –¥–ª—è –∞–¥–º–∏–Ω–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_roles:
        role = user_roles[user_id]
        if role in ['developer', 'admin', 'moderator', 'operator']:
            has_admin_access = True
    
    if has_admin_access:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {get_user_display_name(user_id)}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏.\n\n"
        "üèÜ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
        f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
        "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
        "üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n"
        "üìä –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤."
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

def normalize_team_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥"""
    name_mapping = {
        "Real Madrid CF": "Real Madrid",
        "FC Barcelona": "Barcelona",
        "Manchester City FC": "Manchester City",
        "Manchester United FC": "Manchester United",
        "Liverpool FC": "Liverpool",
        "Chelsea FC": "Chelsea",
        "Arsenal FC": "Arsenal",
        "FC Bayern M√ºnchen": "Bayern Munich",
        "Borussia Dortmund": "Borussia Dortmund",
        "Paris Saint-Germain FC": "PSG",
        "Real Madrid": "Real Madrid",
        "Barcelona": "Barcelona",
        "Manchester City": "Manchester City",
        "Manchester United": "Manchester United",
        "Liverpool": "Liverpool",
        "Chelsea": "Chelsea",
        "Arsenal": "Arsenal",
        "Bayern Munich": "Bayern Munich",
        "PSG": "PSG"
    }
    return name_mapping.get(name, name)

def get_match_status_emoji(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞"""
    status_mapping = {
        'SCHEDULED': 'üïí',  # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
        'LIVE': 'üî¥',      # –ò–¥–µ—Ç —Å–µ–π—á–∞—Å
        'IN_PLAY': 'üî¥',   # –ò–¥–µ—Ç —Å–µ–π—á–∞—Å
        'PAUSED': '‚è∏Ô∏è',    # –ü–µ—Ä–µ—Ä—ã–≤
        'FINISHED': '‚úÖ',   # –ó–∞–≤–µ—Ä—à–µ–Ω
        'POSTPONED': '‚è≥',  # –û—Ç–ª–æ–∂–µ–Ω
        'CANCELLED': '‚ùå',  # –û—Ç–º–µ–Ω–µ–Ω
        'SUSPENDED': '‚ö†Ô∏è',  # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    }
    return status_mapping.get(status, '‚ùì')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
async def fetch_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (matches_cache['last_update'] and 
            (current_time - matches_cache['last_update']).total_seconds() < matches_cache['cache_duration'] and 
            matches_cache['data']):
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π")
            return matches_cache['data']
        
        async with aiohttp.ClientSession() as session:
            headers = {
                'X-Auth-Token': load_config().get('football_api_token', '')
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
            london_tz = pytz.timezone('Europe/London')
            today = datetime.now(london_tz).strftime("%Y-%m-%d")
            next_week = (datetime.now(london_tz) + timedelta(days=7)).strftime("%Y-%m-%d")
            url = f"http://api.football-data.org/v4/matches?dateFrom={today}&dateTo={next_week}"
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å {today} –ø–æ {next_week}")
            
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    matches = data.get('matches', [])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π –∏–∑ API")
                    
                    formatted_matches = []
                    uz_timezone = pytz.timezone('Asia/Tashkent')
                    
                    for match in matches:
                        try:
                            home_team = normalize_team_name(match['homeTeam'].get('name', ''))
                            away_team = normalize_team_name(match['awayTeam'].get('name', ''))
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                            if home_team in FAVORITE_TEAMS or away_team in FAVORITE_TEAMS:
                                utc_time = datetime.strptime(match['utcDate'], "%Y-%m-%dT%H:%M:%SZ")
                                utc_time = utc_time.replace(tzinfo=pytz.UTC)
                                uz_time = utc_time.astimezone(uz_timezone)
                                
                                score = match.get('score', {})
                                current_score = "- : -"
                                
                                if match['status'] == 'FINISHED':
                                    if score.get('fullTime', {}).get('home') is not None:
                                        home_score = score['fullTime']['home']
                                        away_score = score['fullTime']['away']
                                        current_score = f"{home_score} : {away_score}"
                                
                                elif match['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']:
                                    if score.get('fullTime', {}).get('home') is not None:
                                        home_score = score['fullTime']['home']
                                        away_score = score['fullTime']['away']
                                        current_score = f"{home_score} : {away_score}"
                                    elif score.get('halfTime', {}).get('home') is not None:
                                        home_score = score['halfTime']['home']
                                        away_score = score['halfTime']['away']
                                        current_score = f"{home_score} : {away_score}"
                                
                                formatted_match = {
                                    "home": home_team,
                                    "away": away_team,
                                    "time": uz_time.strftime("%H:%M"),
                                    "date": uz_time.strftime("%d.%m.%Y"),
                                    "status": match['status'],
                                    "score": current_score,
                                    "competition": match['competition']['name']
                                }
                                
                                formatted_matches.append(formatted_match)
                        
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞: {str(e)}")
                            continue
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏
                    formatted_matches.sort(key=lambda x: (
                        0 if x['status'] in ['LIVE', 'IN_PLAY', 'PAUSED'] else
                        1 if x['status'] == 'FINISHED' else 2,
                        datetime.strptime(f"{x['date']} {x['time']}", "%d.%m.%Y %H:%M")
                    ))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    matches_cache['data'] = formatted_matches
                    matches_cache['last_update'] = current_time
                    
                    return formatted_matches
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return matches_cache['data'] if matches_cache['data'] else []
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {str(e)}")
        return matches_cache['data'] if matches_cache['data'] else []

def get_team_id(team_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–∞–Ω–¥—ã –¥–ª—è API football-data.org"""
    team_ids = {
        "Real Madrid": 86,
        "Barcelona": 81,
        "Manchester City": 65,
        "Manchester United": 66,
        "Liverpool": 64,
        "Chelsea": 61,
        "Arsenal": 57,
        "Bayern Munich": 5,
        "Borussia Dortmund": 4,
        "PSG": 524
    }
    return team_ids.get(team_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def split_long_message(text, max_length=4000):
    """–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    current_part = ""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –±–ª–æ–∫–∞–º –º–∞—Ç—á–µ–π (–¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
    blocks = text.split('\n\n')
    
    for block in blocks:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å + –Ω–æ–≤—ã–π –±–ª–æ–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if len(current_part + block + '\n\n') <= max_length:
            current_part += block + '\n\n'
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π
            if current_part:
                parts.append(current_part.strip())
            current_part = block + '\n\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part.strip())
    
    return parts

async def send_long_message(message, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏"""
    parts = await split_long_message(text)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π
        chat_type = message.chat.type if hasattr(message, 'chat') else message.message.chat.type
        is_group = chat_type in ['group', 'supergroup']
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        if is_group:
            try:
                bot_member = await message.get_bot().get_chat_member(
                    chat_id=message.chat.id if hasattr(message, 'chat') else message.message.chat.id,
                    user_id=message.get_bot().id
                )
                can_send = bot_member.can_send_messages
                can_edit = bot_member.can_edit_messages
                
                if not can_send:
                    logger.error("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {str(e)}")
                return
        
        # –ï—Å–ª–∏ —ç—Ç–æ callback query (–∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        if hasattr(message, 'edit_message_text'):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                for part in parts[:-1]:
                    await message.get_bot().send_message(
                        chat_id=message.message.chat.id,
                        text=part
                    )
                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.edit_message_text(
                    text=parts[-1],
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.get_bot().send_message(
                    chat_id=message.message.chat.id,
                    text=parts[-1],
                    reply_markup=reply_markup
                )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                for part in parts[:-1]:
                    await message.get_bot().send_message(
                        chat_id=message.chat.id,
                        text=part
                    )
                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.get_bot().send_message(
                    chat_id=message.chat.id,
                    text=parts[-1],
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            chat_id = message.chat.id if hasattr(message, 'chat') else message.message.chat.id
            await message.get_bot().send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ."
            )
        except:
            pass

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if query.data.startswith('predict_'):
        await process_prediction(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif query.data.startswith('stats_'):
        await show_match_stats(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    elif query.data.startswith('role_'):
        role_name = query.data.split('_')[1]
        
        if 'awaiting_role_name' in context.user_data and 'target_user_id' in context.user_data:
            target_user_id = context.user_data['target_user_id']
            user_id = str(query.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å
            if role_name == 'developer' and user_id != ADMIN_ID:
                await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª—å Developer!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å developer
            if target_user_id in user_roles and user_roles[target_user_id] == 'developer' and user_id != ADMIN_ID:
                await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å Developer!")
                return
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_roles[target_user_id] = role_name
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ (30 –¥–Ω–µ–π) –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∫—Ä–æ–º–µ developer –∏ user
            if role_name not in ['developer', 'user']:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ (30 –¥–Ω–µ–π)
                if 'role_expiry' not in user_items.get(target_user_id, {}):
                    if target_user_id not in user_items:
                        user_items[target_user_id] = {}
                    user_items[target_user_id]['role_expiry'] = {}
                
                user_items[target_user_id]['role_expiry'][role_name] = int(time.time()) + (30 * 24 * 60 * 60)  # 30 –¥–Ω–µ–π
            
            # –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
            if 'shop_role_purchase' in context.user_data:
                context.user_data.pop('shop_role_purchase', None)
            
            save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
            user_name = user_names.get(target_user_id) or user_nicknames.get(target_user_id) or f"User{target_user_id}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
            try:
                role_info = USER_ROLES.get(role_name, {'name': role_name})
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"üéñÔ∏è –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {role_info['name']}!\n"
                         f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
            
            await query.edit_message_text(
                f"‚úÖ –†–æ–ª—å {role_name} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}!"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_assign_role")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_remove_role")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏", callback_data="admin_list_roles")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('awaiting_role_name', None)
            context.user_data.pop('target_user_id', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    elif query.data == 'admin_panel':
        await admin_panel(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    elif query.data == 'admin_manage_roles':
        await admin_manage_roles(query)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    elif query.data == 'admin_assign_role':
        await admin_assign_role(query, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    elif query.data == 'admin_remove_role':
        await admin_remove_role(query, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
    elif query.data == 'admin_list_roles':
        await admin_list_roles(query)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    elif query.data == 'back_to_main':
        user_id = str(query.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚öΩÔ∏è –ú–∞—Ç—á–∏", callback_data='today_matches'),
             InlineKeyboardButton("üéØ –ü—Ä–æ–≥–Ω–æ–∑—ã", callback_data='show_predictions')],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='show_balance'),
             InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data='show_top')],
            [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data='show_shop'),
             InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='show_help')]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
        elif user_id in user_roles and user_roles[user_id] in ['admin', 'moderator', 'operator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏
            role_expired = False
            if user_id in user_items and 'role_expiry' in user_items[user_id]:
                role = user_roles[user_id]
                if role in user_items[user_id]['role_expiry']:
                    expiry_time = user_items[user_id]['role_expiry'][role]
                    if int(time.time()) > expiry_time:
                        # –†–æ–ª—å –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                        user_roles.pop(user_id, None)
                        user_items[user_id]['role_expiry'].pop(role, None)
                        role_expired = True
                        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
            
            if not role_expired:
                keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {get_user_display_name(user_id)}!\n\n"
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏.\n\n"
            "üèÜ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
            f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
            "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
            "üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n"
            "üìä –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤."
        )
        
        await query.edit_message_text(welcome_message, reply_markup=reply_markup)
    
    elif query.data == 'show_predictions':
        user_id = str(query.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = await get_user_balance(user_id)
        if balance < PREDICTION_COST:
            await query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞!\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
        matches = await fetch_matches()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
        has_vip = has_active_item(user_id, 'vip_predict')
        
        if has_vip:
            # –î–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
            available_matches = [m for m in matches if m['status'] in ['SCHEDULED', 'LIVE', 'IN_PLAY', 'PAUSED']]
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            available_matches = [m for m in matches if m['status'] == 'SCHEDULED']
        
        if not available_matches:
            await query.edit_message_text(
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏
        keyboard = []
        for match in available_matches:
            button_text = f"{match['home']} vs {match['away']} ({match['date']} {match['time']})"
            callback_data = f"predict_{match['home']}_{match['away']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–≥—Ä–∞–¥
        message = (
            "‚öΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n\n"
            "üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
            f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
            "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!"
        )
        
        if has_vip:
            message += "\n‚ú® –£ –≤–∞—Å –µ—Å—Ç—å VIP-–ø—Ä–æ–≥–Ω–æ–∑! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏."
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    elif query.data == 'show_shop':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
        keyboard = []
        categories = {
            'boosters': 'üéØ –ë—É—Å—Ç–µ—Ä—ã',
            'game': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
            'roles': 'üî∞ –†–æ–ª–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã'
        }
        
        for category, title in categories.items():
            keyboard.append([InlineKeyboardButton(title, callback_data=f'shop_category_{category}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith('stats_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_id = str(query.from_user.id)
        if not has_active_item(user_id, 'extended_stats'):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!")
            return
        
        _, home_team, away_team = query.data.split('_')
        matches = await fetch_matches()
        current_match = None
        
        for match in matches:
            if match['home'] == home_team and match['away'] == away_team:
                current_match = match
                break
        
        if not current_match:
            await query.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
        stats = {
            'possession': {'home': 55, 'away': 45},
            'shots': {'home': 12, 'away': 8},
            'shots_on_target': {'home': 5, 'away': 3},
            'corners': {'home': 6, 'away': 4},
            'fouls': {'home': 10, 'away': 12},
            'yellow_cards': {'home': 2, 'away': 3},
            'red_cards': {'home': 0, 'away': 0}
        }
        
        text = f"üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞\n\n"
        text += f"‚öΩÔ∏è {home_team} {current_match['score']} {away_team}\n"
        text += f"üèÜ {current_match['competition']}\n\n"
        
        text += f"‚è±Ô∏è –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º: {stats['possession']['home']}% - {stats['possession']['away']}%\n"
        text += f"üéØ –£–¥–∞—Ä—ã: {stats['shots']['home']} - {stats['shots']['away']}\n"
        text += f"üéØ –í —Å—Ç–≤–æ—Ä: {stats['shots_on_target']['home']} - {stats['shots_on_target']['away']}\n"
        text += f"‚õ≥Ô∏è –£–≥–ª–æ–≤—ã–µ: {stats['corners']['home']} - {stats['corners']['away']}\n"
        text += f"‚ö†Ô∏è –§–æ–ª—ã: {stats['fouls']['home']} - {stats['fouls']['away']}\n"
        text += f"üü® –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {stats['yellow_cards']['home']} - {stats['yellow_cards']['away']}\n"
        text += f"üü• –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {stats['red_cards']['home']} - {stats['red_cards']['away']}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=query.data)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    elif query.data == 'show_tables':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        user_id = str(query.from_user.id)
        if not has_active_item(user_id, 'tournament_tables'):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º!")
            return
        
        await show_tournament_tables(query.message, context)
    
    elif query.data == 'show_balance':
        user_id = str(query.from_user.id)
        balance = await get_user_balance(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_items = []
        if user_id in user_items:
            for item_id, value in user_items[user_id].items():
                if has_active_item(user_id, item_id):
                    item = SHOP_ITEMS[item_id]
                    if isinstance(value, int):
                        active_items.append(f"{item['name']} (x{value})")
                    else:
                        try:
                            expiration = datetime.fromisoformat(value)
                            days_left = (expiration - datetime.now(pytz.UTC)).days
                            active_items.append(f"{item['name']} ({days_left} –¥–Ω.)")
                        except (ValueError, TypeError):
                            continue
        
        text = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in user_statuses:
            text += f"üí≠ –í–∞—à —Å—Ç–∞—Ç—É—Å: {user_statuses[user_id]}\n\n"
        
        if active_items:
            text += "üéÅ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
            for item in active_items:
                text += f"‚Ä¢ {item}\n"
        else:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    elif query.data == 'shop':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
        keyboard = []
        categories = {
            'boosters': 'üéØ –ë—É—Å—Ç–µ—Ä—ã',
            'game': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
            'roles': 'üî∞ –†–æ–ª–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã'
        }
        
        for category, title in categories.items():
            keyboard.append([InlineKeyboardButton(title, callback_data=f'shop_category_{category}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith('shop_category_'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = query.data.replace('shop_category_', '')
        await show_shop(query, category, SHOP_ITEMS)
    
    elif query.data.startswith('buy_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
        item_id = query.data.replace('buy_', '')
        await process_purchase_shop(query, item_id, SHOP_ITEMS, user_currency, user_items, user_statuses, user_nicknames, user_roles, update_user_balance, save_user_data)
    
    elif query.data == 'make_prediction':
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
        matches = await fetch_matches()
        live_matches = [m for m in matches if m['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']]
        
        if not live_matches:
            await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VIP-–ø—Ä–æ–≥–Ω–æ–∑–∞
        user_id = str(query.from_user.id)
        has_vip = has_active_item(user_id, 'vip_predict')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å live –º–∞—Ç—á–∞–º–∏
        keyboard = []
        for match in live_matches:
            button_text = f"{match['home']} {match['score']} {match['away']}"
            callback_data = f"predict_{match['home']}_{match['away']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n"
            f"üèÜ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç" +
            ("\n‚ú® –£ –≤–∞—Å –µ—Å—Ç—å VIP-–ø—Ä–æ–≥–Ω–æ–∑!" if has_vip else ""),
            reply_markup=reply_markup
        )
    
    elif query.data.startswith('predict_'):
        await process_prediction(update, context)
    
    elif query.data == 'select_all':
        user_id = str(query.from_user.id)
        if 'user_settings' not in config:
            config['user_settings'] = {}
        if user_id not in config['user_settings']:
            config['user_settings'] = {
                'subscribed_teams': [],
                'goal_alerts': True,
                'match_reminders': True
            }
        
        config['user_settings'][user_id]['subscribed_teams'] = list(AVAILABLE_TEAMS.keys())
        save_config(config)
        await query.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
        await show_settings(query.message)
    
    elif query.data == 'clear_all':
        user_id = str(query.from_user.id)
        if 'user_settings' in config and user_id in config['user_settings']:
            config['user_settings'][user_id]['subscribed_teams'] = []
            save_config(config)
        await query.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω")
        await show_settings(query.message)
        
    elif query.data == 'divider':
        await query.answer()
        
    elif query.data in ['toggle_goals', 'toggle_matches']:
        user_id = str(query.from_user.id)
        
        if 'user_settings' not in config:
            config['user_settings'] = {}
        if user_id not in config['user_settings']:
            config['user_settings'] = {
                'subscribed_teams': [],
                'goal_alerts': True,
                'match_reminders': True
            }
            
        setting_key = 'goal_alerts' if query.data == 'toggle_goals' else 'match_reminders'
        current_value = config['user_settings'][user_id].get(setting_key, True)
        config['user_settings'][user_id][setting_key] = not current_value
        
        setting_name = '–≥–æ–ª–æ–≤' if query.data == 'toggle_goals' else '–º–∞—Ç—á–µ–π'
        status = '–≤–∫–ª—é—á–µ–Ω—ã' if not current_value else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
        await query.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {setting_name} {status}")
        
        save_config(config)
        await show_settings(query.message)
    
    elif query.data.startswith('subscribe_'):
        team_id = query.data.replace('subscribe_', '')
        user_id = str(query.from_user.id)
        
        if 'user_settings' not in config:
            config['user_settings'] = {}
        if user_id not in config['user_settings']:
            config['user_settings'] = {
                'subscribed_teams': [],
                'goal_alerts': True,
                'match_reminders': True
            }
            
        if team_id in config['user_settings'][user_id].get('subscribed_teams', []):
            config['user_settings'][user_id]['subscribed_teams'].remove(team_id)
            await query.answer(f"‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {AVAILABLE_TEAMS[team_id]}")
        else:
            if 'subscribed_teams' not in config['user_settings'][user_id]:
                config['user_settings'][user_id]['subscribed_teams'] = []
            config['user_settings'][user_id]['subscribed_teams'].append(team_id)
            await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {AVAILABLE_TEAMS[team_id]}")
        
        save_config(config)
        await show_settings(query.message)
    
    elif query.data == 'admin_users_list':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_users_list(query)
    
    elif query.data == 'admin_stats':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin', 'operator']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_stats(query)
    
    elif query.data == 'admin_broadcast':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin', 'moderator', 'operator']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_broadcast(query, context)
    
    elif query.data == 'admin_broadcast_confirm':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin', 'moderator', 'operator']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_broadcast_send(query, context)
    
    elif query.data == 'admin_manage_items':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_manage_items(query, context)
    
    elif query.data.startswith('admin_add_item_'):
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        item_id = query.data.replace('admin_add_item_', '')
        await admin_add_item(query, context, item_id)
    
    elif query.data == 'admin_manage_prices':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        await admin_manage_prices(query, context)
    
    elif query.data == 'show_top':
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        sorted_users = sorted(user_currency.items(), key=lambda x: x[1], reverse=True)
        
        text = "üèÜ –¢–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª–µ–π:\n\n"
        for i, (user_id, balance) in enumerate(sorted_users[:10], 1):
            name = get_user_display_name(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
            vip_status = "üëë " if has_active_item(user_id, 'vip_status') else ""
            custom_status = f"\nüí≠ {user_statuses[user_id]}" if user_id in user_statuses else ""
            
            text += f"{i}. {vip_status}{name} - {balance} –º–æ–Ω–µ—Ç{custom_status}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    elif query.data == 'show_help':
        text = "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        for command, description in COMMANDS.items():
            text += f"/{command} - {description}\n"
        
        text += "\nüèÜ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
        text += f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
        text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
        text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
        text += "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    elif query.data == 'today_matches':
        matches = await fetch_matches()
        if matches:
            text = "üìÖ –ú–∞—Ç—á–∏:\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º live –º–∞—Ç—á–∏
            live_matches = [m for m in matches if m['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']]
            if live_matches:
                text += "üî¥ LIVE –ú–ê–¢–ß–ò:\n\n"
                for match in live_matches:
                    home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                    away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                    text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} {match['score']} {away_star}{match['away']}\n"
                    text += f"üèÜ {match['competition']}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            finished_matches = [m for m in matches if m['status'] == 'FINISHED']
            if finished_matches:
                text += "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ú–ê–¢–ß–ò:\n\n"
                for match in finished_matches:
                    home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                    away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                    text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} {match['score']} {away_star}{match['away']}\n"
                    text += f"üèÜ {match['competition']}\n\n"
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
            scheduled_matches = [m for m in matches if m['status'] not in ['LIVE', 'IN_PLAY', 'PAUSED', 'FINISHED']]
            if scheduled_matches:
                text += "üìÜ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ú–ê–¢–ß–ò:\n\n"
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –¥–∞—Ç–∞–º
                matches_by_date = {}
                for match in scheduled_matches:
                    match_date = datetime.strptime(match['date'], "%d.%m.%Y").date()
                    if match_date not in matches_by_date:
                        matches_by_date[match_date] = []
                    matches_by_date[match_date].append(match)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                sorted_dates = sorted(matches_by_date.keys())
                
                # –í—ã–≤–æ–¥–∏–º –º–∞—Ç—á–∏ –ø–æ –¥–∞—Ç–∞–º
                for date in sorted_dates:
                    text += f"\nüìÜ {date.strftime('%d.%m.%Y')}:\n"
                    for match in matches_by_date[date]:
                        home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                        away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                        text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} vs {away_star}{match['away']}\n"
                        text += f"üïí {match['time']} (UZB)\n"
                        text += f"üèÜ {match['competition']}\n\n"
        else:
            text = "–ú–∞—Ç—á–µ–π —Å —É—á–∞—Å—Ç–∏–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='today_matches')],
                   [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
        await send_long_message(query.message, text, reply_markup=reply_markup)
    
    elif query.data == 'admin_manage_roles':
        await admin_manage_roles(query)
    
    elif query.data == 'admin_assign_role':
        await admin_assign_role(query, context)
    
    elif query.data == 'admin_remove_role':
        await admin_remove_role(query, context)
    
    elif query.data == 'admin_list_roles':
        await admin_list_roles(query)
    
    elif query.data == 'admin_modify_balance':
        user_id = str(query.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['admin_state'] = 'waiting_user_id'
        
        await query.edit_message_text(
            "üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
            ]])
        )
    
    else:
        await query.answer()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback_data
        if query.data == 'help':
            text = "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            for command, description in COMMANDS.items():
                text += f"/{command} - {description}\n"
            
            text += "\nüèÜ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
            text += f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
            text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
            text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
            text += "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif query.data == 'settings':
            await show_settings(query.message)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—á–∞–º–∏
async def matches_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /matches"""
    matches = await fetch_matches()
    if matches:
        text = "üìÖ –ú–∞—Ç—á–∏:\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º live –º–∞—Ç—á–∏
        live_matches = [m for m in matches if m['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']]
        if live_matches:
            text += "üî¥ LIVE –ú–ê–¢–ß–ò:\n\n"
            for match in live_matches:
                home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} {match['score']} {away_star}{match['away']}\n"
                text += f"üèÜ {match['competition']}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
        finished_matches = [m for m in matches if m['status'] == 'FINISHED']
        if finished_matches:
            text += "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ú–ê–¢–ß–ò:\n\n"
            for match in finished_matches:
                home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} {match['score']} {away_star}{match['away']}\n"
                text += f"üèÜ {match['competition']}\n\n"
        
        # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
        scheduled_matches = [m for m in matches if m['status'] not in ['LIVE', 'IN_PLAY', 'PAUSED', 'FINISHED']]
        if scheduled_matches:
            text += "üìÜ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ú–ê–¢–ß–ò:\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ –¥–∞—Ç–∞–º
            matches_by_date = {}
            for match in scheduled_matches:
                match_date = datetime.strptime(match['date'], "%d.%m.%Y").date()
                if match_date not in matches_by_date:
                    matches_by_date[match_date] = []
                matches_by_date[match_date].append(match)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            sorted_dates = sorted(matches_by_date.keys())
            
            # –í—ã–≤–æ–¥–∏–º –º–∞—Ç—á–∏ –ø–æ –¥–∞—Ç–∞–º
            for date in sorted_dates:
                text += f"\nüìÜ {date.strftime('%d.%m.%Y')}:\n"
                for match in matches_by_date[date]:
                    home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                    away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                    text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} vs {away_star}{match['away']}\n"
                    text += f"üïí {match['time']} (UZB)\n"
                    text += f"üèÜ {match['competition']}\n\n"
    else:
        text = "–ú–∞—Ç—á–µ–π —Å —É—á–∞—Å—Ç–∏–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='today_matches')],
               [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏
    await send_long_message(update.message, text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
    for command, description in COMMANDS.items():
        text += f"/{command} - {description}\n"
    
    text += "\nüèÜ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
    text += f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
    text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
    text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
    text += "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_matches(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—á–∏"""
    matches = await fetch_matches()
    if matches:
        text = "üìÖ –ú–∞—Ç—á–∏:\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º live –º–∞—Ç—á–∏
        live_matches = [m for m in matches if m['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']]
        if live_matches:
            text += "üî¥ LIVE –ú–ê–¢–ß–ò:\n\n"
            for match in live_matches:
                home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} {match['score']} {away_star}{match['away']}\n"
                text += f"üèÜ {match['competition']}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
        text += "üìÜ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ú–ê–¢–ß–ò:\n\n"
        today = datetime.now(pytz.timezone('Asia/Tashkent')).date()
        
        matches_by_date = {}
        for match in matches:
            if match['status'] not in ['LIVE', 'IN_PLAY', 'PAUSED']:
                match_date = datetime.strptime(match['date'], "%d.%m.%Y").date()
                if match_date not in matches_by_date:
                    matches_by_date[match_date] = []
                matches_by_date[match_date].append(match)
        
        sorted_dates = sorted(matches_by_date.keys())
        
        for date in sorted_dates:
            if date >= today:
                text += f"\nüìÜ {date.strftime('%d.%m.%Y')}:\n"
                for match in matches_by_date[date]:
                    home_star = "‚≠êÔ∏è " if match['home'] in FAVORITE_TEAMS else ""
                    away_star = " ‚≠êÔ∏è" if match['away'] in FAVORITE_TEAMS else ""
                    text += f"{get_match_status_emoji(match['status'])} {home_star}{match['home']} vs {away_star}{match['away']}\n"
                    if match['status'] == 'FINISHED':
                        text += f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {match['score']}\n"
                    else:
                        text += f"üïí {match['time']} (UZB)\n"
                    text += f"üèÜ {match['competition']}\n\n"
    else:
        text = "–ú–∞—Ç—á–µ–π —Å —É—á–∞—Å—Ç–∏–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='today_matches')],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await send_long_message(message, text, reply_markup=reply_markup)

async def show_settings(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config = load_config()
    user_id = str(message.from_user.id if isinstance(message, Update) else message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = config.get('user_settings', {}).get(user_id, {
        'subscribed_teams': [],
        'goal_alerts': True,
        'match_reminders': True
    })
    
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
    text += "üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
    text += f"{'‚úÖ' if user_settings.get('goal_alerts', True) else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–∞—Ö\n"
    text += f"{'‚úÖ' if user_settings.get('match_reminders', True) else '‚ùå'} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö\n\n"
    text += "üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
    selected_teams = user_settings.get('subscribed_teams', [])
    if selected_teams:
        for team_id in selected_teams:
            text += f"‚úÖ {AVAILABLE_TEAMS[team_id]}\n"
    else:
        text += "‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard.append([
        InlineKeyboardButton(
            f"{'üîî –í–∫–ª.' if user_settings.get('goal_alerts', True) else 'üîï –í—ã–∫–ª.'} –ì–æ–ª—ã",
            callback_data='toggle_goals'
        )
    ])
    keyboard.append([
        InlineKeyboardButton(
            f"{'üîî –í–∫–ª.' if user_settings.get('match_reminders', True) else 'üîï –í—ã–∫–ª.'} –ú–∞—Ç—á–∏",
            callback_data='toggle_matches'
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    keyboard.append([InlineKeyboardButton("„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è", callback_data='divider')])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    teams_buttons = []
    current_row = []
    
    for team_id, team_name in AVAILABLE_TEAMS.items():
        status = "‚úÖ" if team_id in selected_teams else "‚ûï"
        current_row.append(
            InlineKeyboardButton(
                f"{status} {team_name}",
                callback_data=f'subscribe_{team_id}'
            )
        )
        
        if len(current_row) == 2:
            teams_buttons.append(current_row)
            current_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if current_row:
        teams_buttons.append(current_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥
    keyboard.extend(teams_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data='select_all'),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear_all')
    ])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, Update):
            await message.message.edit_text(text, reply_markup=reply_markup)
        else:
            await message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, Update):
            await message.message.reply_text(text, reply_markup=reply_markup)
        else:
            await message.reply_text(text, reply_markup=reply_markup)

async def check_and_send_goal_alerts(matches, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global previous_scores
    config = load_config()
    
    for match in matches:
        if match['status'] in ['LIVE', 'IN_PLAY', 'PAUSED']:
            match_id = f"{match['home']}_{match['away']}_{match['date']}"
            current_score = match['score']
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if match_id not in previous_scores:
                previous_scores[match_id] = current_score
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {current_score}")
                continue
            
            old_score = previous_scores[match_id]
            if current_score != old_score:
                try:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—á–µ—Ç–∞ –Ω–∞ —á–∏—Å–ª–∞
                    old_home, old_away = map(int, old_score.split(' : '))
                    new_home, new_away = map(int, current_score.split(' : '))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∑–∞–±–∏–ª
                    if new_home > old_home:
                        scoring_team = match['home']
                        opponent_team = match['away']
                        new_score = new_home
                        team_score = "–¥–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞"
                    else:
                        scoring_team = match['away']
                        opponent_team = match['home']
                        new_score = new_away
                        team_score = "–≥–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    alert_text = f"‚öΩÔ∏è –ì–û–õ! –ó–∞–±–∏–≤–∞–µ—Ç {team_score}!\n\n"
                    alert_text += f"‚ú® {scoring_team} –∑–∞–±–∏–≤–∞–µ—Ç –≤ –≤–æ—Ä–æ—Ç–∞ {opponent_team}!\n"
                    alert_text += f"üìä –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {match['home']} {current_score} {match['away']}\n"
                    alert_text += f"üèÜ {match['competition']}"
                    
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –≥–æ–ª: {scoring_team} –∑–∞–±–∏–≤–∞–µ—Ç, —Å—á—ë—Ç {current_score}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    for user_id, settings in config.get('user_settings', {}).items():
                        subscribed_teams = settings.get('subscribed_teams', [])
                        if settings.get('goal_alerts', True):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥
                            if any(team in subscribed_teams for team in [match['home'], match['away']]):
                                try:
                                    await context.bot.send_message(chat_id=user_id, text=alert_text)
                                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                
                except ValueError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–∞ –º–∞—Ç—á–∞: {str(e)}")
                except Exception as e:
                    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–∞: {str(e)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—á–µ—Ç
            previous_scores[match_id] = current_score

async def check_and_send_match_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏ –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞"""
    config = load_config()
    matches = await fetch_matches()
    uz_timezone = pytz.timezone('Asia/Tashkent')
    now = datetime.now(uz_timezone)
    
    for match in matches:
        if match['status'] == 'SCHEDULED':
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –≤ –æ–±—ä–µ–∫—Ç datetime —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            match_datetime = datetime.strptime(f"{match['date']} {match['time']}", "%d.%m.%Y %H:%M")
            match_datetime = uz_timezone.localize(match_datetime)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_until_match = match_datetime - now
            minutes_until_match = time_until_match.total_seconds() / 60
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 30 —Å–µ–∫—É–Ω–¥)
            if 4.5 <= minutes_until_match <= 5.5:
                reminder_text = f"‚öΩÔ∏è –ú–∞—Ç—á –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!\n\n"
                reminder_text += f"{match['home']} vs {match['away']}\n"
                reminder_text += f"üïí –ù–∞—á–∞–ª–æ –≤ {match['time']} (UZB)\n"
                reminder_text += f"üèÜ {match['competition']}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id, settings in config.get('user_settings', {}).items():
                    if (settings.get('match_reminders', True) and 
                        (match['home'] in settings.get('subscribed_teams', []) or 
                         match['away'] in settings.get('subscribed_teams', []))):
                        try:
                            await context.bot.send_message(chat_id=user_id, text=reminder_text)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Ç—á–µ {match['home']} vs {match['away']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            logger.info(f"–í—Ä–µ–º—è –¥–æ –º–∞—Ç—á–∞: {minutes_until_match} –º–∏–Ω—É—Ç")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 30 —Å–µ–∫—É–Ω–¥)
            elif -0.5 <= minutes_until_match <= 0.5:
                start_text = f"üéÆ –ú–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
                start_text += f"{match['home']} vs {match['away']}\n"
                start_text += f"üèÜ {match['competition']}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id, settings in config.get('user_settings', {}).items():
                    if (settings.get('match_reminders', True) and 
                        (match['home'] in settings.get('subscribed_teams', []) or 
                         match['away'] in settings.get('subscribed_teams', []))):
                        try:
                            await context.bot.send_message(chat_id=user_id, text=start_text)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞ {match['home']} vs {match['away']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    await show_settings(update.message)

async def get_user_balance(user_id: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_currency.get(str(user_id), 1000)  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 1000

async def update_user_balance(user_id: str, amount: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    if user_id not in user_currency:
        user_currency[user_id] = 1000
    user_currency[user_id] += amount
    save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /predict"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = await get_user_balance(user_id)
    if balance < PREDICTION_COST:
        await update.message.reply_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞!\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
    matches = await fetch_matches()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
    has_vip = has_active_item(user_id, 'vip_predict')
    
    if has_vip:
        # –î–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
        available_matches = [m for m in matches if m['status'] in ['SCHEDULED', 'LIVE', 'IN_PLAY', 'PAUSED']]
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
        available_matches = [m for m in matches if m['status'] == 'SCHEDULED']
    
    if not available_matches:
        await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏
    keyboard = []
    for match in available_matches:
        button_text = f"{match['home']} vs {match['away']} ({match['date']} {match['time']})"
        callback_data = f"predict_{match['home']}_{match['away']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–≥—Ä–∞–¥
    message = (
        "‚öΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n\n"
        "üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:\n"
        f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {PREDICTION_REWARD_EXACT} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {PREDICTION_REWARD_DIFF} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {PREDICTION_REWARD_OUTCOME} –º–æ–Ω–µ—Ç\n\n"
        "üåü –¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!"
    )
    
    if has_vip:
        message += "\n‚ú® –£ –≤–∞—Å –µ—Å—Ç—å VIP-–ø—Ä–æ–≥–Ω–æ–∑! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏."
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    user_id = str(update.effective_user.id)
    balance = await get_user_balance(user_id)
    
    await update.message.reply_text(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –¥–µ–ª–∞—è —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á–∏!"
    )

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
    sorted_users = sorted(user_currency.items(), key=lambda x: x[1], reverse=True)
    
    text = "üèÜ –¢–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (user_id, balance) in enumerate(sorted_users[:10], 1):
        name = get_user_display_name(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
        vip_status = "üëë " if has_active_item(user_id, 'vip_status') else ""
        custom_status = f"\nüí≠ {user_statuses[user_id]}" if user_id in user_statuses else ""
        
        text += f"{i}. {vip_status}{name} - {balance} –º–æ–Ω–µ—Ç{custom_status}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup)

async def process_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–∞—Ç—á"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏–∑ callback_data
    _, home_team, away_team = query.data.split('_')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
    matches = await fetch_matches()
    current_match = None
    
    for match in matches:
        if match['home'] == home_team and match['away'] == away_team:
            current_match = match
            break
    
    if not current_match:
        await query.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª—Å—è –ª–∏ —É–∂–µ –º–∞—Ç—á
    if current_match['status'] in ['LIVE', 'IN_PLAY', 'PAUSED'] and not has_active_item(user_id, 'vip_predict'):
        await query.answer("‚ùå –ú–∞—Ç—á —É–∂–µ –Ω–∞—á–∞–ª—Å—è! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
    user_balance = await get_user_balance(user_id)
    if user_balance < PREDICTION_COST:
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {PREDICTION_COST}, —É –≤–∞—Å: {user_balance}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É—Å—Ç–µ—Ä–æ–≤
    has_double_reward = has_active_item(user_id, 'double_reward')
    has_insurance = has_active_item(user_id, 'insurance')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á —Ç–æ–ø–æ–≤—ã–º
    is_top_match = home_team in TOP_TEAMS and away_team in TOP_TEAMS
    multiplier = TOP_MATCH_MULTIPLIER if is_top_match else 1.0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    exact_reward = int(PREDICTION_REWARD_EXACT * multiplier)
    diff_reward = int(PREDICTION_REWARD_DIFF * multiplier)
    outcome_reward = int(PREDICTION_REWARD_OUTCOME * multiplier)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞, —É—á–∏—Ç—ã–≤–∞–µ–º –µ—ë
    if has_double_reward:
        exact_reward *= 2
        diff_reward *= 2
        outcome_reward *= 2
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['predicting_match'] = {
        'home': home_team,
        'away': away_team,
        'double_reward': has_double_reward,
        'insurance': has_insurance
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –±—É—Å—Ç–µ—Ä–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    top_match_text = "\nüåü –≠—Ç–æ —Ç–æ–ø–æ–≤—ã–π –º–∞—Ç—á! –ù–∞–≥—Ä–∞–¥—ã —É–≤–µ–ª–∏—á–µ–Ω—ã!" if is_top_match else ""
    boosters_text = ""
    if has_double_reward:
        boosters_text += "\nüéØ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±—É—Å—Ç–µ—Ä '–î–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞'!"
    if has_insurance:
        boosters_text += "\nüõ°Ô∏è –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞'!"
    
    await query.edit_message_text(
        f"‚öΩÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á: {home_team} vs {away_team}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {PREDICTION_COST} –º–æ–Ω–µ—Ç\n"
        f"üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:{top_match_text}\n"
        f"‚Ä¢ –¢–æ—á–Ω—ã–π —Å—á—ë—Ç: {exact_reward} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤: {diff_reward} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥: {outcome_reward} –º–æ–Ω–µ—Ç{boosters_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X-Y', –≥–¥–µ X - –≥–æ–ª—ã –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, Y - –≥–æ–ª—ã –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2-1"
    )

async def handle_prediction_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    user_id = str(update.effective_user.id)
    prediction_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    if not re.match(r'^\d+-\d+$', prediction_text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞!\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X-Y', –≥–¥–µ X –∏ Y - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2-1"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    match_info = context.user_data.get('predicting_match', {})
    if not match_info:
        await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    home_team = match_info['home']
    away_team = match_info['away']
    double_reward = match_info.get('double_reward', False)
    insurance = match_info.get('insurance', False)
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
    await update_user_balance(user_id, -PREDICTION_COST)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    match_id = f"{home_team}_{away_team}"
    if user_id not in user_predictions:
        user_predictions[user_id] = {}
    
    user_predictions[user_id][match_id] = {
        'prediction': prediction_text,
        'timestamp': datetime.now(pytz.UTC).isoformat(),
        'double_reward': double_reward,
        'insurance': insurance
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Å—Ç–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã
    boosters_text = ""
    if double_reward:
        use_item(user_id, 'double_reward')
        boosters_text += "\nüéØ –ë—É—Å—Ç–µ—Ä '–î–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    
    if insurance:
        use_item(user_id, 'insurance')
        boosters_text += "\nüõ°Ô∏è –ë—É—Å—Ç–µ—Ä '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    
    try:
        final_home, final_away = map(int, match['score'].split(' : '))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        for user_id, prediction_data in user_predictions[match_id].items():
            pred_home, pred_away = prediction_data['scores']
            boosters = prediction_data.get('boosters', {})
            
            if pred_home == final_home and pred_away == final_away:
                # –¢–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                reward = PREDICTION_REWARD_EXACT
                if boosters.get('double_reward'):
                    reward *= 2
                
                await update_user_balance(user_id, reward)
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"üéâ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} - {match['away']} –æ–∫–∞–∑–∞–ª—Å—è —Ç–æ—á–Ω—ã–º!\n"
                             f"üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {reward} –º–æ–Ω–µ—Ç!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ: {str(e)}")
            elif pred_home == final_home or pred_away == final_away:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ–≤
                reward = PREDICTION_REWARD_DIFF
                if boosters.get('double_reward'):
                    reward *= 2
                
                await update_user_balance(user_id, reward)
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"üéâ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} - {match['away']} –æ–∫–∞–∑–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º!\n"
                             f"üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {reward} –º–æ–Ω–µ—Ç!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ: {str(e)}")
            elif pred_home == final_home and pred_away == final_away:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥
                reward = PREDICTION_REWARD_OUTCOME
                if boosters.get('double_reward'):
                    reward *= 2
                
                await update_user_balance(user_id, reward)
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"üéâ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} - {match['away']} –æ–∫–∞–∑–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º!\n"
                             f"üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {reward} –º–æ–Ω–µ—Ç!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ: {str(e)}")
            elif boosters.get('insurance'):
                # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
                await update_user_balance(user_id, PREDICTION_COST)
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"üõ°Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {PREDICTION_COST} –º–æ–Ω–µ—Ç –Ω–∞ –º–∞—Ç—á {match['home']} - {match['away']} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
        del user_predictions[match_id]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        
    except (ValueError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {str(e)}")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    has_access = False
    
    # Developer –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        has_access = True
        user_roles[user_id] = 'developer'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å developer –¥–ª—è –∞–¥–º–∏–Ω–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_roles:
        role = user_roles[user_id]
        if role in ['developer', 'admin', 'moderator', 'operator']:
            has_access = True
    
    if not has_access:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    role = user_roles.get(user_id, 'user')
    
    keyboard = []
    
    # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
    if role in ['developer', 'admin', 'moderator', 'operator']:
        keyboard.append([InlineKeyboardButton("üì® –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')])
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è operator –∏ –≤—ã—à–µ
    if role in ['developer', 'admin', 'operator']:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data='admin_stats')])
    
    # –§—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ developer
    if role in ['developer', 'admin']:
        keyboard.append([InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_users_list')])
        keyboard.append([InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_modify_balance')])
        keyboard.append([InlineKeyboardButton("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data='admin_manage_items')])
        keyboard.append([InlineKeyboardButton("üí≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data='admin_manage_prices')])
        keyboard.append([InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data='admin_manage_roles')])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    role_info = USER_ROLES[role]
    await update.message.reply_text(
        f"üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {role_info['description']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = str(update.message.from_user.id)
    admin_state = context.user_data.get('admin_state', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    has_access = False
    
    # Developer –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        has_access = True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_roles:
        role = user_roles[user_id]
        if role in ['developer', 'admin', 'moderator', 'operator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏
            if role != 'developer':  # Developer –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                if user_id in user_items and 'role_expiry' in user_items[user_id]:
                    if role in user_items[user_id]['role_expiry']:
                        expiry_time = user_items[user_id]['role_expiry'][role]
                        if int(time.time()) > expiry_time:
                            # –†–æ–ª—å –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                            user_roles.pop(user_id, None)
                            user_items[user_id]['role_expiry'].pop(role, None)
                            save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
                            await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∏—Å—Ç–µ–∫!")
                            return
                        else:
                            has_access = True
                    else:
                        has_access = True
                else:
                    has_access = True
            else:
                has_access = True
    
    if not has_access:
        return
    
    if admin_state == 'waiting_user_id':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        target_user_id = update.message.text
        
        if target_user_id not in user_currency:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        context.user_data['target_user_id'] = target_user_id
        context.user_data['admin_state'] = 'waiting_amount'
        
        current_balance = user_currency.get(target_user_id, 0)
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –º–æ–Ω–µ—Ç\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n"
            "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–Ω—è—Ç–∏—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ -300"
        )
    
    elif admin_state == 'waiting_amount':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        try:
            amount = int(update.message.text)
            target_user_id = context.user_data['target_user_id']
            
            await update_user_balance(target_user_id, amount)
            new_balance = user_currency[target_user_id]
            
            await update.message.reply_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                if amount > 0:
                    notification = f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} –º–æ–Ω–µ—Ç!\n"
                else:
                    notification = f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {abs(amount)} –º–æ–Ω–µ—Ç!\n"
                notification += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç"
                
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=notification
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('admin_state', None)
            context.user_data.pop('target_user_id', None)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ -300"
            )
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
    
    elif admin_state == 'waiting_broadcast_message':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin', 'moderator', 'operator']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        message_text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['broadcast_message'] = message_text
        context.user_data['admin_state'] = 'waiting_broadcast_confirm'
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='admin_broadcast_confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üì® –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            f"{message_text}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(user_currency)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=reply_markup
        )
    
    elif admin_state == 'waiting_item_user_id':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        target_user_id = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞–Ω–Ω—ã—Ö
        user_exists = (target_user_id in user_names or 
                       target_user_id in user_currency or 
                       target_user_id in user_nicknames or
                       target_user_id in user_predictions)
        
        if not user_exists:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        context.user_data['target_user_id'] = target_user_id
        context.user_data['admin_state'] = 'waiting_item_selection'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for item_id, item in SHOP_ITEMS.items():
            keyboard.append([InlineKeyboardButton(item['name'], callback_data=f'admin_add_item_{item_id}')])
        
        keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
        user_name = user_names.get(target_user_id) or user_nicknames.get(target_user_id) or f"User{target_user_id}"
        
        await update.message.reply_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {target_user_id})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    elif admin_state == 'waiting_item_selection':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        item_id = update.message.text
        
        if item_id not in SHOP_ITEMS:
            await update.message.reply_text(
                "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        context.user_data['item_id'] = item_id
        context.user_data['admin_state'] = 'waiting_item_quantity'
        
        current_item = SHOP_ITEMS[item_id]
        await update.message.reply_text(
            f"üéÅ {current_item['name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        )
    
    elif admin_state == 'waiting_item_quantity':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        try:
            quantity = int(update.message.text)
            if quantity < 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
                return
                
            item_id = context.user_data['item_id']
            old_quantity = user_items[user_id].get(item_id, 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            user_items[user_id][item_id] = old_quantity + quantity
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {SHOP_ITEMS[item_id]['name']} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n"
                f"–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {old_quantity}\n"
                f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_items[user_id][item_id]}"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('admin_state', None)
            context.user_data.pop('item_id', None)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
            )
    
    elif admin_state == 'waiting_price_item_id':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω–∞–º–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
        
        item_id = update.message.text
        
        if item_id not in SHOP_ITEMS:
            await update.message.reply_text(
                "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        context.user_data['price_item_id'] = item_id
        context.user_data['admin_state'] = 'waiting_new_price'
        
        current_price = SHOP_ITEMS[item_id]['price']
        await update.message.reply_text(
            f"üè∑Ô∏è –ü—Ä–µ–¥–º–µ—Ç: {SHOP_ITEMS[item_id]['name']}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} –º–æ–Ω–µ—Ç\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
        )
    
    elif admin_state == 'waiting_new_price':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω–∞–º–∏
        if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
            return
            
        try:
            new_price = int(update.message.text)
            if new_price < 0:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
                return
                
            item_id = context.user_data['price_item_id']
            old_price = SHOP_ITEMS[item_id]['price']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            SHOP_ITEMS[item_id]['price'] = new_price
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_shop_items()
            
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {SHOP_ITEMS[item_id]['name']} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
                f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} –º–æ–Ω–µ—Ç\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} –º–æ–Ω–µ—Ç"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('admin_state', None)
            context.user_data.pop('price_item_id', None)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
            )
    
    return True

async def admin_users_list(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, balance in user_currency.items():
        name = get_user_display_name(user_id)
        text += f"üë§ {name}\n"
        text += f"ID: {user_id}\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        
        keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_panel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(user_currency)
    total_predictions = sum(len(preds) for preds in user_predictions.values())
    total_coins = sum(user_currency.values())
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    item_stats = {}
    for user_id, items in user_items.items():
        for item_id, value in items.items():
            if item_id in SHOP_ITEMS:
                if item_id not in item_stats:
                    item_stats[item_id] = 0
                item_stats[item_id] += 1
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üéØ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_predictions}\n"
    text += f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ –æ–±–æ—Ä–æ—Ç–µ: {total_coins}\n\n"
    
    text += "üéÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n"
    for item_id, count in item_stats.items():
        text += f"‚Ä¢ {SHOP_ITEMS[item_id]['name']}: {count} —à—Ç.\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_panel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def admin_broadcast(query, context):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['admin_state'] = 'waiting_broadcast_message'
    
    await query.edit_message_text(
        "üì® –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
        ]])
    )

async def admin_broadcast_send(query, context):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    message_text = context.user_data.get('broadcast_message', '')
    if not message_text:
        await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('admin_state', None)
    context.user_data.pop('broadcast_message', None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success_count = 0
    fail_count = 0
    
    await query.edit_message_text("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
    logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(user_currency)}")
    
    for user_id in list(user_currency.keys()):
        try:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await context.bot.send_message(
                chat_id=int(user_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
            )
            success_count += 1
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            fail_count += 1
    
    logger.debug(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {fail_count}")
    
    await query.edit_message_text(
        f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail_count}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_panel')
        ]])
    )

async def admin_manage_items(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['admin_state'] = 'waiting_item_user_id'
    
    await query.edit_message_text(
        "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
        ]])
    )

async def admin_add_item(query, context, item_id):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    target_user_id = context.user_data.get('target_user_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞–Ω–Ω—ã—Ö
    user_exists = (target_user_id in user_names or 
                   target_user_id in user_currency or 
                   target_user_id in user_nicknames or
                   target_user_id in user_predictions)
    
    if not user_exists:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if item_id not in SHOP_ITEMS:
        await query.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if target_user_id not in user_items:
        user_items[target_user_id] = {}
    
    item = SHOP_ITEMS[item_id]
    current_time = datetime.now(pytz.UTC)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å —Ä–æ–ª—å—é
    role_name = None
    if item_id == 'role_admin' or item['name'] == 'üîê Admin':
        role_name = 'admin'
    elif item_id == 'role_moderator' or item['name'] == 'üõ°Ô∏è Moderator':
        role_name = 'moderator'
    elif item_id == 'role_operator' or item['name'] == 'üîß Operator':
        role_name = 'operator'
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–≤—è–∑–∞–Ω —Å —Ä–æ–ª—å—é, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if role_name:
        user_roles[target_user_id] = role_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ (30 –¥–Ω–µ–π)
        if 'role_expiry' not in user_items.get(target_user_id, {}):
            if target_user_id not in user_items:
                user_items[target_user_id] = {}
            user_items[target_user_id]['role_expiry'] = {}
        
        user_items[target_user_id]['role_expiry'][role_name] = int(time.time()) + (30 * 24 * 60 * 60)  # 30 –¥–Ω–µ–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    requires_input = False
    input_instructions = ""
    
    if item_id == 'custom_nickname' or item['name'] == 'üìù –°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞':
        user_items[target_user_id]['awaiting_nickname'] = True
        requires_input = True
        input_instructions = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)."
    elif item_id == 'custom_status' or item['name'] == 'üìù –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞':
        user_items[target_user_id]['awaiting_status'] = True
        requires_input = True
        input_instructions = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)."
    
    if item['duration'] > 1:
        # –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        expiration = current_time + timedelta(days=item['duration'])
        user_items[target_user_id][item_id] = expiration.isoformat()
    else:
        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if item_id not in user_items[target_user_id]:
            user_items[target_user_id][item_id] = 0
        user_items[target_user_id][item_id] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = str(query.from_user.id)
    admin_role = "Developer" if admin_id == ADMIN_ID else user_roles.get(admin_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    admin_name = user_names.get(admin_id) or user_nicknames.get(admin_id) or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        message_text = f"üéÅ {admin_name} ({admin_role}) –¥–æ–±–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç: {item['name']}!"
        
        if role_name:
            message_text += f"\n\nüéñÔ∏è –í–∞–º —Ç–∞–∫–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {USER_ROLES[role_name]['name']}!\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
        
        if requires_input:
            message_text += f"\n\n‚úèÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {input_instructions}"
        
        await context.bot.send_message(
            chat_id=target_user_id,
            text=message_text
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
    user_name = user_names.get(target_user_id) or user_nicknames.get(target_user_id) or f"User{target_user_id}"
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('admin_state', None)
    context.user_data.pop('target_user_id', None)
    
    success_message = f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç {item['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {target_user_id})!"
    if role_name:
        success_message += f"\n\nüéñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–∫–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {USER_ROLES[role_name]['name']}!"
    if requires_input:
        success_message += f"\n\n‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞."
    
    await query.edit_message_text(
        success_message,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_panel')
        ]])
    )

async def admin_manage_prices(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        'boosters': 'üéØ –ë—É—Å—Ç–µ—Ä—ã',
        'game': 'üéÆ –ò–≥—Ä–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏'
    }
    
    text = "üí≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n\n"
    
    for category, title in categories.items():
        text += f"{title}:\n"
        for item_id, item in SHOP_ITEMS.items():
            if (category == 'boosters' and item_id in ['double_reward', 'insurance', 'vip_predict']) or \
               (category == 'game' and item_id in ['custom_nickname', 'custom_status', 'vip_status']) or \
               (category == 'football' and item_id in ['extended_stats', 'priority_notifications', 'tournament_tables']):
                text += f"‚Ä¢ {item['name']} - {item['price']} –º–æ–Ω–µ—Ç\n"
        text += "\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['admin_state'] = 'waiting_price_item_id'
    
    text += "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:\n"
    text += "(double_reward, insurance, vip_predict, custom_nickname, custom_status, vip_status, extended_stats, priority_notifications, tournament_tables)"
    
    keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

def save_shop_items():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        with open('shop_items.json', 'w', encoding='utf-8') as f:
            json.dump(SHOP_ITEMS, f, ensure_ascii=False, indent=4)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")

def load_shop_items():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    global SHOP_ITEMS
    try:
        if os.path.exists('shop_items.json'):
            with open('shop_items.json', 'r', encoding='utf-8') as f:
                SHOP_ITEMS = json.load(f)
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
    if user_id in user_items and user_items[user_id].get('awaiting_nickname'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
        new_nickname = update.message.text[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if new_nickname in user_nicknames.values():
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º."
            )
            return True
        
        user_nicknames[user_id] = new_nickname
        user_items[user_id].pop('awaiting_nickname', None)  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_nickname}\n"
            "–û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö."
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if user_id in user_items and user_items[user_id].get('awaiting_status'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        new_status = update.message.text[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        user_statuses[user_id] = new_status
        user_items[user_id].pop('awaiting_status', None)  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_status}\n"
            "–û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤."
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    elif 'awaiting_user_id_for_role' in context.user_data:
        target_user_id = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞–Ω–Ω—ã—Ö
        user_exists = (target_user_id in user_names or 
                       target_user_id in user_currency or 
                       target_user_id in user_nicknames or
                       target_user_id in user_predictions)
        
        if not user_exists:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            context.user_data.pop('awaiting_user_id_for_role', None)
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å
        context.user_data['target_user_id'] = target_user_id
        context.user_data.pop('awaiting_user_id_for_role', None)
        context.user_data['awaiting_role_name'] = True
        
        keyboard = [
            [InlineKeyboardButton("üëë Admin", callback_data="role_admin")],
            [InlineKeyboardButton("üõ°Ô∏è Moderator", callback_data="role_moderator")],
            [InlineKeyboardButton("üîß Operator", callback_data="role_operator")],
            [InlineKeyboardButton("üë§ User", callback_data="role_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_roles")]
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
        user_name = user_names.get(target_user_id) or user_nicknames.get(target_user_id) or f"User{target_user_id}"
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    elif 'awaiting_user_id_for_role_removal' in context.user_data:
        target_user_id = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞–Ω–Ω—ã—Ö
        user_exists = (target_user_id in user_names or 
                       target_user_id in user_currency or 
                       target_user_id in user_nicknames or
                       target_user_id in user_predictions)
        
        if not user_exists:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            context.user_data.pop('awaiting_user_id_for_role_removal', None)
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å
        if target_user_id not in user_roles:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª–∏!")
            context.user_data.pop('awaiting_user_id_for_role_removal', None)
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å developer
        if user_roles[target_user_id] == 'developer' and str(update.message.from_user.id) != ADMIN_ID:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å Developer!")
            context.user_data.pop('awaiting_user_id_for_role_removal', None)
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
        user_name = user_names.get(target_user_id) or user_nicknames.get(target_user_id) or f"User{target_user_id}"
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
        role_name = user_roles.pop(target_user_id)
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        
        await update.message.reply_text(f"‚úÖ –†–æ–ª—å {role_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
        keyboard = [
            [InlineKeyboardButton("üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_assign_role")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_remove_role")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏", callback_data="admin_list_roles")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data.pop('awaiting_user_id_for_role_removal', None)
        return True
    
    elif 'predicting_match' in context.user_data:
        await handle_prediction_input(update, context)
        return True
    
    elif 'admin_state' in context.user_data:
        await handle_admin_input(update, context)
        return True
    
    return False

async def show_extended_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞"""
    user_id = str(update.effective_user.id)
    
    if not has_active_item(user_id, 'extended_stats'):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!")
        return
    
    matches = await fetch_matches()
    keyboard = []
    
    for match in matches:
        if match['status'] in ['LIVE', 'IN_PLAY', 'PAUSED', 'FINISHED']:
            button_text = f"{match['home']} {match['score']} {match['away']}"
            callback_data = f"stats_{match['home']}_{match['away']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    if not keyboard:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

async def show_tournament_tables(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    user_id = str(update.effective_user.id)
    
    if not has_active_item(user_id, 'tournament_tables'):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º!")
        return
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ API
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
    tables = {
        "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": [
            ("–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", 60, 25),
            ("–ê—Ä—Å–µ–Ω–∞–ª", 57, 25),
            ("–õ–∏–≤–µ—Ä–ø—É–ª—å", 54, 25)
        ],
        "–õ–∞ –õ–∏–≥–∞": [
            ("–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", 62, 25),
            ("–ñ–∏—Ä–æ–Ω–∞", 56, 25),
            ("–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", 54, 25)
        ]
    }
    
    text = "üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n\n"
    for tournament, teams in tables.items():
        text += f"üìä {tournament}:\n"
        for i, (team, points, games) in enumerate(teams, 1):
            text += f"{i}. {team} - {points} –æ—á–∫–æ–≤ ({games} –∏–≥—Ä)\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global application
    
    try:
        config = load_config()
        if not config["bot_token"]:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
            
        application = Application.builder().token(config["bot_token"]).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("matches", matches_command))
        application.add_handler(CommandHandler("settings", settings_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("predict", predict_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("top", top_command))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("stats", show_extended_stats))
        application.add_handler(CommandHandler("table", show_tournament_tables))
        application.add_handler(CommandHandler("shop", shop_command))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_text_input
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ–≤ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        job_queue = application.job_queue
        job_queue.run_repeating(lambda context: check_and_send_goal_alerts(asyncio.run(fetch_matches()), context), interval=3)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        job_queue.run_repeating(check_and_send_match_reminders, interval=30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        job_queue.run_repeating(lambda context: save_data_periodically(), interval=120)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å
        job_queue.run_repeating(check_roles_periodically, interval=3600)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop"""
    await shop_cmd(update, context, SHOP_ITEMS)

def has_active_item(user_id: str, item_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return has_active_item_shop(user_id, item_id, user_items)

def use_item(user_id: str, item_id: str) -> bool:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    return use_item_shop(user_id, item_id, user_items, save_user_data, user_currency, user_predictions, user_names, user_statuses, user_nicknames)

async def check_predictions(match):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if match['status'] != 'FINISHED':
        return
    
    match_id = f"{match['home']}_{match['away']}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
    try:
        final_home, final_away = map(int, match['score'].split('-'))
    except (ValueError, AttributeError):
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç –º–∞—Ç—á–∞ {match_id}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á —Ç–æ–ø–æ–≤—ã–º
    is_top_match = match['home'] in TOP_TEAMS and match['away'] in TOP_TEAMS
    multiplier = TOP_MATCH_MULTIPLIER if is_top_match else 1.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id, predictions in user_predictions.items():
        if match_id in predictions:
            prediction_data = predictions[match_id]
            prediction_text = prediction_data.get('prediction', '')
            
            try:
                pred_home, pred_away = map(int, prediction_text.split('-'))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                is_exact = (pred_home == final_home and pred_away == final_away)
                is_diff = (pred_home - pred_away == final_home - final_away)
                is_outcome = ((pred_home > pred_away and final_home > final_away) or
                             (pred_home < pred_away and final_home < final_away) or
                             (pred_home == pred_away and final_home == final_away))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                reward = 0
                reward_type = ""
                
                if is_exact:
                    reward = int(PREDICTION_REWARD_EXACT * multiplier)
                    reward_type = "—Ç–æ—á–Ω—ã–π —Å—á—ë—Ç"
                elif is_diff:
                    reward = int(PREDICTION_REWARD_DIFF * multiplier)
                    reward_type = "–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≥–æ–ª–æ–≤"
                elif is_outcome:
                    reward = int(PREDICTION_REWARD_OUTCOME * multiplier)
                    reward_type = "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–≤–æ–π–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                if prediction_data.get('double_reward', False) and reward > 0:
                    reward *= 2
                    reward_type += " (—Å –¥–≤–æ–π–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π)"
                
                if reward > 0:
                    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    await update_user_balance(user_id, reward)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    try:
                        await application.bot.send_message(
                            chat_id=user_id,
                            text=f"üéâ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} vs {match['away']} –ø—Ä–∏–Ω–µ—Å –Ω–∞–≥—Ä–∞–¥—É!\n"
                                 f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑: {prediction_text}, –ò—Ç–æ–≥: {match['score']}\n"
                                 f"üèÜ –í—ã —É–≥–∞–¥–∞–ª–∏ {reward_type} –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {reward} –º–æ–Ω–µ—Ç!"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                
                else:
                    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É
                    if prediction_data.get('insurance', False):
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
                        await update_user_balance(user_id, PREDICTION_COST)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        try:
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=f"üõ°Ô∏è –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} vs {match['away']} –Ω–µ —Å–±—ã–ª—Å—è, –Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞!\n"
                                     f"‚ùå –ü—Ä–æ–≥–Ω–æ–∑: {prediction_text}, –ò—Ç–æ–≥: {match['score']}\n"
                                     f"üí∞ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {PREDICTION_COST} –º–æ–Ω–µ—Ç."
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
                        try:
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ùå –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {match['home']} vs {match['away']} –Ω–µ —Å–±—ã–ª—Å—è.\n"
                                     f"–ü—Ä–æ–≥–Ω–æ–∑: {prediction_text}, –ò—Ç–æ–≥: {match['score']}"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                del user_predictions[user_id][match_id]
                
            except (ValueError, KeyError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)

async def admin_manage_roles(query):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    keyboard.append([InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='admin_assign_role')])
    keyboard.append([InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='admin_remove_role')])
    keyboard.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏", callback_data='admin_list_roles')])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def admin_assign_role(query, context):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['awaiting_user_id_for_role'] = True
    
    keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_manage_roles')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789",
        reply_markup=reply_markup
    )

async def admin_remove_role(query, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['awaiting_user_id_for_role_removal'] = True
    
    keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_manage_roles')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üë§ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789",
        reply_markup=reply_markup
    )

async def admin_list_roles(query):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏"""
    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_id != ADMIN_ID and (user_id not in user_roles or user_roles[user_id] not in ['developer', 'admin']):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏:\n\n"
    
    if not user_roles:
        text += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏."
    else:
        for uid, role in user_roles.items():
            if uid in user_names:
                name = user_names[uid]
            elif uid in user_nicknames:
                name = user_nicknames[uid]
            else:
                name = f"User{uid}"
            
            role_info = USER_ROLES.get(role, {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å', 'prefix': ''})
            text += f"üë§ {name} (ID: {uid})\n"
            text += f"üî∞ –†–æ–ª—å: {role_info['name']}\n"
            text += f"üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: {role_info['prefix']}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_manage_roles')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def check_role_expiry():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global user_roles, user_items
    current_time = int(time.time())
    users_to_update = []
    
    for user_id, items in user_items.items():
        if 'role_expiry' in items:
            for role, expiry_time in list(items['role_expiry'].items()):
                if current_time > expiry_time:
                    # –†–æ–ª—å –∏—Å—Ç–µ–∫–ª–∞
                    logger.info(f"–†–æ–ª—å {role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞")
                    
                    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è
                    items['role_expiry'].pop(role, None)
                    
                    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∞ —Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                    if user_id in user_roles and user_roles[user_id] == role:
                        user_roles.pop(user_id, None)
                        users_to_update.append(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if users_to_update:
        save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in users_to_update:
            try:
                await application.bot.send_message(
                    chat_id=int(user_id),
                    text="‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∏—Å—Ç–µ–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def check_roles_periodically(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–µ–π"""
    await check_role_expiry()

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ CallbackQuery
    query = update.callback_query
    
    # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Update, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ query
    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    has_access = False
    
    # Developer –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        has_access = True
        user_roles[user_id] = 'developer'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å developer –¥–ª—è –∞–¥–º–∏–Ω–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_id in user_roles:
        role = user_roles[user_id]
        if role in ['developer', 'admin', 'moderator', 'operator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏
            if role != 'developer':  # Developer –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                if user_id in user_items and 'role_expiry' in user_items[user_id]:
                    if role in user_items[user_id]['role_expiry']:
                        expiry_time = user_items[user_id]['role_expiry'][role]
                        if int(time.time()) > expiry_time:
                            # –†–æ–ª—å –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                            user_roles.pop(user_id, None)
                            user_items[user_id]['role_expiry'].pop(role, None)
                            save_user_data(user_currency, user_predictions, user_names, user_items, user_statuses, user_nicknames, user_roles)
                            await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∏—Å—Ç–µ–∫!")
                            return
                        else:
                            has_access = True
                    else:
                        has_access = True
                else:
                    has_access = True
            else:
                has_access = True
    
    if not has_access:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    role = user_roles.get(user_id, 'user')
    
    keyboard = []
    
    # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
    if role in ['developer', 'admin', 'moderator', 'operator']:
        keyboard.append([InlineKeyboardButton("üì® –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')])
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è operator –∏ –≤—ã—à–µ
    if role in ['developer', 'admin', 'operator']:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data='admin_stats')])
    
    # –§—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ developer
    if role in ['developer', 'admin']:
        keyboard.append([InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_users_list')])
        keyboard.append([InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_modify_balance')])
        keyboard.append([InlineKeyboardButton("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data='admin_manage_items')])
        keyboard.append([InlineKeyboardButton("üí≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data='admin_manage_prices')])
        keyboard.append([InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data='admin_manage_roles')])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    role_info = USER_ROLES[role]
    await query.edit_message_text(
        f"üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {role_info['description']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    if check_running():
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    create_lock()
    
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        remove_lock()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")